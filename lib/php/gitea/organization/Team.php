<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace gitea\organization;

use \php\Boot;

/**
 * Represents a team in an organization.
 */
class Team {
	/**
	 * @var bool
	 * Value indicating whether this team can create organization repositories.
	 */
	public $canCreateOrgRepo;
	/**
	 * @var string
	 * The team description.
	 */
	public $description;
	/**
	 * @var int
	 * The team identifier.
	 */
	public $id;
	/**
	 * @var bool
	 * Value indicating whether this team includes all repositories.
	 */
	public $includesAllRepositories;
	/**
	 * @var string
	 * The team name.
	 */
	public $name;
	/**
	 * @var Organization
	 * The team organization.
	 */
	public $organization;
	/**
	 * @var string
	 * The team permission.
	 */
	public $permission;
	/**
	 * @var \Array_hx
	 * The units that this team owns.
	 */
	public $units;

	/**
	 * Creates a new team from the specified JSON map.
	 * 
	 * @param mixed $map
	 * 
	 * @return Team
	 */
	public static function fromJson ($map) {
		$model = new Team((\Reflect::hasField($map, "id") && Boot::isOfType(\Reflect::field($map, "id"), Boot::getClass('Int')) ? \Reflect::field($map, "id") : -1));
		if (\Reflect::hasField($map, "can_create_org_repo") && is_bool(\Reflect::field($map, "can_create_org_repo"))) {
			$model->canCreateOrgRepo = \Reflect::field($map, "can_create_org_repo");
		}
		if (\Reflect::hasField($map, "description") && is_string(\Reflect::field($map, "description"))) {
			$model->description = \Reflect::field($map, "description");
		}
		if (\Reflect::hasField($map, "includes_all_repositories") && is_bool(\Reflect::field($map, "includes_all_repositories"))) {
			$model->includesAllRepositories = \Reflect::field($map, "includes_all_repositories");
		}
		if (\Reflect::hasField($map, "name") && is_string(\Reflect::field($map, "name"))) {
			$model->name = \Reflect::field($map, "name");
		}
		if (\Reflect::hasField($map, "organization") && \Reflect::isObject(\Reflect::field($map, "organization"))) {
			$model->organization = Organization::fromJson(\Reflect::field($map, "organization"));
		}
		if (\Reflect::hasField($map, "permission") && is_string(\Reflect::field($map, "permission"))) {
			$model->permission = \Reflect::field($map, "permission");
		}
		if (\Reflect::hasField($map, "units") && (\Reflect::field($map, "units") instanceof \Array_hx)) {
			$model->units = \Reflect::field($map, "units");
		}
		return $model;
	}

	/**
	 * Creates a new team.
	 * 
	 * @param int $id
	 * 
	 * @return void
	 */
	public function __construct ($id) {
		$this->units = new \Array_hx();
		$this->permission = "none";
		$this->organization = null;
		$this->name = "";
		$this->includesAllRepositories = false;
		$this->description = "";
		$this->canCreateOrgRepo = false;
		$this->id = $id;
	}
}

Boot::registerClass(Team::class, 'gitea.organization.Team');
