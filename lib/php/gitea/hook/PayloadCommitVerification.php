<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace gitea\hook;

use \php\Boot;

/**
 * Represents the GPG verification of a commit.
 */
class PayloadCommitVerification {
	/**
	 * @var bool
	 * Value indicating whether the verification has succeeded.
	 */
	public $isVerified;
	/**
	 * @var string
	 * A custom message sent with the verification request.
	 */
	public $payload;
	/**
	 * @var string
	 * A message providing details about the verification.
	 */
	public $reason;
	/**
	 * @var string
	 * The signing key used for the verification.
	 */
	public $signature;
	/**
	 * @var PayloadUser
	 * The user who signed the commit.
	 */
	public $signer;

	/**
	 * Creates a new payload commit verification.
	 * 
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data = null) {
		$this->signer = null;
		$this->signature = "";
		$this->reason = "";
		$this->payload = "";
		$this->isVerified = false;
		if ($data !== null) {
			if (\Reflect::hasField($data, "payload") && is_string(\Reflect::field($data, "payload"))) {
				$this->payload = \Reflect::field($data, "payload");
			}
			if (\Reflect::hasField($data, "reason") && is_string(\Reflect::field($data, "reason"))) {
				$this->reason = \Reflect::field($data, "reason");
			}
			if (\Reflect::hasField($data, "signer") && (\Type::typeof(\Reflect::field($data, "signer")) === \ValueType::TObject())) {
				$this->signer = new PayloadUser(\Reflect::field($data, "signer"));
			}
			if (\Reflect::hasField($data, "signature") && is_string(\Reflect::field($data, "signature"))) {
				$this->signature = \Reflect::field($data, "signature");
			}
			if (\Reflect::hasField($data, "verified") && is_bool(\Reflect::field($data, "verified"))) {
				$this->isVerified = \Reflect::field($data, "verified");
			}
		}
	}
}

Boot::registerClass(PayloadCommitVerification::class, 'gitea.hook.PayloadCommitVerification');
