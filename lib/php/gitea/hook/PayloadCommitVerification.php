<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace gitea\hook;

use \php\Boot;

/**
 * Represents the GPG verification of a commit.
 */
class PayloadCommitVerification {
	/**
	 * @var bool
	 * Value indicating whether the verification has succeeded.
	 */
	public $isVerified;
	/**
	 * @var string
	 * A custom message sent with the verification request.
	 */
	public $payload;
	/**
	 * @var string
	 * A message providing details about the verification.
	 */
	public $reason;
	/**
	 * @var string
	 * The signing key used for the verification.
	 */
	public $signature;
	/**
	 * @var PayloadUser
	 * The user who signed the commit.
	 */
	public $signer;

	/**
	 * Creates a new payload commit verification from the specified JSON map.
	 * 
	 * @param mixed $map
	 * 
	 * @return PayloadCommitVerification
	 */
	public static function fromJson ($map) {
		$model = new PayloadCommitVerification();
		if (\Reflect::hasField($map, "payload") && is_string(\Reflect::field($map, "payload"))) {
			$model->payload = \Reflect::field($map, "payload");
		}
		if (\Reflect::hasField($map, "reason") && is_string(\Reflect::field($map, "reason"))) {
			$model->reason = \Reflect::field($map, "reason");
		}
		if (\Reflect::hasField($map, "signer") && \Reflect::isObject(\Reflect::field($map, "signer"))) {
			$model->signer = PayloadUser::fromJson(\Reflect::field($map, "signer"));
		}
		if (\Reflect::hasField($map, "signature") && is_string(\Reflect::field($map, "signature"))) {
			$model->signature = \Reflect::field($map, "signature");
		}
		if (\Reflect::hasField($map, "verified") && is_bool(\Reflect::field($map, "verified"))) {
			$model->isVerified = \Reflect::field($map, "verified");
		}
		return $model;
	}

	/**
	 * Creates a new payload commit verification.
	 * 
	 * @return void
	 */
	public function __construct () {
		$this->signer = null;
		$this->signature = "";
		$this->reason = "";
		$this->payload = "";
		$this->isVerified = false;
	}
}

Boot::registerClass(PayloadCommitVerification::class, 'gitea.hook.PayloadCommitVerification');
