<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace gitea\hook;

use \gitea\repository\Repository;
use \php\Boot;
use \gitea\user\User;

/**
 * Represents a push event.
 */
class PushEvent {
	/**
	 * @var string
	 * The hash of the new Git revision.
	 */
	public $after;
	/**
	 * @var string
	 * The hash of the previous Git revision.
	 */
	public $before;
	/**
	 * @var \Array_hx
	 * The revision commits.
	 */
	public $commits;
	/**
	 * @var string
	 * The URL for comparing the revisions.
	 */
	public $compareUrl;
	/**
	 * @var User
	 * The user who pushed the commits.
	 */
	public $pusher;
	/**
	 * @var string
	 * The Git reference.
	 */
	public $ref;
	/**
	 * @var Repository
	 * The repository where the commits were pushed.
	 */
	public $repository;
	/**
	 * @var string
	 * The secret used to validate this event.
	 */
	public $secret;
	/**
	 * @var User
	 * The user who sent this event.
	 */
	public $sender;

	/**
	 * Creates a new push event.
	 * 
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data = null) {
		$this->sender = null;
		$this->secret = "";
		$this->repository = null;
		$this->ref = "";
		$this->pusher = null;
		$this->compareUrl = "";
		$this->commits = new \Array_hx();
		$this->before = "";
		$this->after = "";
		if ($data !== null) {
			if (\Reflect::hasField($data, "after") && is_string(\Reflect::field($data, "after"))) {
				$this->after = \Reflect::field($data, "after");
			}
			if (\Reflect::hasField($data, "before") && is_string(\Reflect::field($data, "before"))) {
				$this->before = \Reflect::field($data, "before");
			}
			if (\Reflect::hasField($data, "commits") && (\Reflect::field($data, "commits") instanceof \Array_hx)) {
				$_this = \Reflect::field($data, "commits");
				$result = [];
				$data1 = $_this->arr;
				$_g_current = 0;
				$_g_length = \count($data1);
				while ($_g_current < $_g_length) {
					$result[] = new PayloadCommit($data1[$_g_current++]);
				}
				$this->commits = \Array_hx::wrap($result);
			}
			if (\Reflect::hasField($data, "compare_url") && is_string(\Reflect::field($data, "compare_url"))) {
				$this->compareUrl = \Reflect::field($data, "compare_url");
			}
			if (\Reflect::hasField($data, "pusher") && (\Type::typeof(\Reflect::field($data, "pusher")) === \ValueType::TObject())) {
				$this->pusher = new User(\Reflect::field($data, "pusher"));
			}
			if (\Reflect::hasField($data, "ref") && is_string(\Reflect::field($data, "ref"))) {
				$this->ref = \Reflect::field($data, "ref");
			}
			if (\Reflect::hasField($data, "repository") && (\Type::typeof(\Reflect::field($data, "repository")) === \ValueType::TObject())) {
				$this->repository = new Repository(\Reflect::field($data, "repository"));
			}
			if (\Reflect::hasField($data, "secret") && is_string(\Reflect::field($data, "secret"))) {
				$this->secret = \Reflect::field($data, "secret");
			}
			if (\Reflect::hasField($data, "sender") && (\Type::typeof(\Reflect::field($data, "sender")) === \ValueType::TObject())) {
				$this->sender = new User(\Reflect::field($data, "sender"));
			}
		}
	}
}

Boot::registerClass(PushEvent::class, 'gitea.hook.PushEvent');
