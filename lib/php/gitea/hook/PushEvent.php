<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace gitea\hook;

use \gitea\repository\Repository;
use \php\Boot;
use \gitea\user\User;

/**
 * Represents a push event.
 */
class PushEvent {
	/**
	 * @var string
	 * The hash of the new Git revision.
	 */
	public $after;
	/**
	 * @var string
	 * The hash of the previous Git revision.
	 */
	public $before;
	/**
	 * @var \Array_hx
	 * The revision commits.
	 */
	public $commits;
	/**
	 * @var string
	 * The URL for comparing the revisions.
	 */
	public $compareUrl;
	/**
	 * @var User
	 * The user who pushed the commits.
	 */
	public $pusher;
	/**
	 * @var string
	 * The Git reference.
	 */
	public $ref;
	/**
	 * @var Repository
	 * The repository where the commits were pushed.
	 */
	public $repository;
	/**
	 * @var string
	 * The secret used to validate this event.
	 */
	public $secret;
	/**
	 * @var User
	 * The user who sent this event.
	 */
	public $sender;

	/**
	 * Creates a new push event from the specified JSON map.
	 * 
	 * @param mixed $map
	 * 
	 * @return PushEvent
	 */
	public static function fromJson ($map) {
		$model = new PushEvent();
		if (\Reflect::hasField($map, "after") && is_string(\Reflect::field($map, "after"))) {
			$model->after = \Reflect::field($map, "after");
		}
		if (\Reflect::hasField($map, "before") && is_string(\Reflect::field($map, "before"))) {
			$model->before = \Reflect::field($map, "before");
		}
		if (\Reflect::hasField($map, "commits") && (\Reflect::field($map, "commits") instanceof \Array_hx)) {
			$_this = \Reflect::field($map, "commits");
			$f = Boot::getStaticClosure(PayloadCommit::class, 'fromJson');
			$result = [];
			$data = $_this->arr;
			$_g_current = 0;
			$_g_length = \count($data);
			while ($_g_current < $_g_length) {
				$result[] = $f($data[$_g_current++]);
			}
			$model->commits = \Array_hx::wrap($result);
		}
		if (\Reflect::hasField($map, "compare_url") && is_string(\Reflect::field($map, "compare_url"))) {
			$model->compareUrl = \Reflect::field($map, "compare_url");
		}
		if (\Reflect::hasField($map, "pusher") && \Reflect::isObject(\Reflect::field($map, "pusher"))) {
			$model->pusher = User::fromJson(\Reflect::field($map, "pusher"));
		}
		if (\Reflect::hasField($map, "ref") && is_string(\Reflect::field($map, "ref"))) {
			$model->ref = \Reflect::field($map, "ref");
		}
		if (\Reflect::hasField($map, "repository") && \Reflect::isObject(\Reflect::field($map, "repository"))) {
			$model->repository = Repository::fromJson(\Reflect::field($map, "repository"));
		}
		if (\Reflect::hasField($map, "secret") && is_string(\Reflect::field($map, "secret"))) {
			$model->secret = \Reflect::field($map, "secret");
		}
		if (\Reflect::hasField($map, "sender") && \Reflect::isObject(\Reflect::field($map, "sender"))) {
			$model->sender = User::fromJson(\Reflect::field($map, "sender"));
		}
		return $model;
	}

	/**
	 * Creates a new push event.
	 * 
	 * @return void
	 */
	public function __construct () {
		$this->sender = null;
		$this->secret = "";
		$this->repository = null;
		$this->ref = "";
		$this->pusher = null;
		$this->compareUrl = "";
		$this->commits = new \Array_hx();
		$this->before = "";
		$this->after = "";
	}
}

Boot::registerClass(PushEvent::class, 'gitea.hook.PushEvent');
