<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace gitea\hook;

use \php\Boot;
use \datetime\utils\DateTimeUtils;

/**
 * Represents a commit.
 */
class PayloadCommit {
	/**
	 * @var \Array_hx
	 * The list of added files.
	 */
	public $added;
	/**
	 * @var PayloadUser
	 * The person who authored the commit.
	 */
	public $author;
	/**
	 * @var PayloadUser
	 * The person who committed the code.
	 */
	public $committer;
	/**
	 * @var string
	 * The commit hash.
	 */
	public $id;
	/**
	 * @var string
	 * The commit message.
	 */
	public $message;
	/**
	 * @var \Array_hx
	 * The list of modified files.
	 */
	public $modified;
	/**
	 * @var \Array_hx
	 * The list of removed files.
	 */
	public $removed;
	/**
	 * @var \Date
	 * The commit date.
	 */
	public $timestamp;
	/**
	 * @var string
	 * The URL to the commit's history.
	 */
	public $url;
	/**
	 * @var PayloadCommitVerification
	 * The GPG verification of this commit.
	 */
	public $verification;

	/**
	 * Creates a new payload commit from the specified JSON map.
	 * 
	 * @param mixed $map
	 * 
	 * @return PayloadCommit
	 */
	public static function fromJson ($map) {
		$model = (\Reflect::hasField($map, "id") && is_string(\Reflect::field($map, "id")) ? \Reflect::field($map, "id") : "");
		$model1 = new PayloadCommit($model, (\Reflect::hasField($map, "message") && is_string(\Reflect::field($map, "message")) ? \Reflect::field($map, "message") : ""));
		if (\Reflect::hasField($map, "added") && (\Reflect::field($map, "added") instanceof \Array_hx)) {
			$model1->added = \Reflect::field($map, "added");
		}
		if (\Reflect::hasField($map, "author") && \Reflect::isObject(\Reflect::field($map, "author"))) {
			$model1->author = PayloadUser::fromJson(\Reflect::field($map, "author"));
		}
		if (\Reflect::hasField($map, "committer") && \Reflect::isObject(\Reflect::field($map, "committer"))) {
			$model1->committer = PayloadUser::fromJson(\Reflect::field($map, "committer"));
		}
		if (\Reflect::hasField($map, "modified") && (\Reflect::field($map, "modified") instanceof \Array_hx)) {
			$model1->modified = \Reflect::field($map, "modified");
		}
		if (\Reflect::hasField($map, "removed") && (\Reflect::field($map, "removed") instanceof \Array_hx)) {
			$model1->removed = \Reflect::field($map, "removed");
		}
		if (\Reflect::hasField($map, "timestamp") && is_string(\Reflect::field($map, "timestamp"))) {
			$model1->timestamp = \Date::fromTime((DateTimeUtils::fromString(\Reflect::field($map, "timestamp")) - 62135596800.0) * 1000);
		}
		if (\Reflect::hasField($map, "url") && is_string(\Reflect::field($map, "url"))) {
			$model1->url = \Reflect::field($map, "url");
		}
		if (\Reflect::hasField($map, "verification") && \Reflect::isObject(\Reflect::field($map, "verification"))) {
			$model1->verification = PayloadCommitVerification::fromJson(\Reflect::field($map, "verification"));
		}
		return $model1;
	}

	/**
	 * Creates a new payload commit.
	 * 
	 * @param string $id
	 * @param string $message
	 * 
	 * @return void
	 */
	public function __construct ($id, $message = "") {
		if ($message === null) {
			$message = "";
		}
		$this->verification = null;
		$this->url = "";
		$this->timestamp = null;
		$this->removed = new \Array_hx();
		$this->modified = new \Array_hx();
		$this->committer = null;
		$this->author = null;
		$this->added = new \Array_hx();
		$this->id = $id;
		$this->message = $message;
	}
}

Boot::registerClass(PayloadCommit::class, 'gitea.hook.PayloadCommit');
